{
	"info": {
		"_postman_id": "1f256b70-a6a9-4459-aaad-d02234339d79",
		"name": "Products",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "18870383",
		"_collection_link": "https://dark-sunset-927375.postman.co/workspace/DummyJson~8bdad5bb-bdc7-4d91-8b0c-b756ec038173/collection/18870383-1f256b70-a6a9-4459-aaad-d02234339d79?action=share&source=collection_link&creator=18870383"
	},
	"item": [
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Vérification de l'ID ,Title,Category\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.products[2].id).to.eql(3);\r",
							"    pm.expect(jsonData.products[2].title).to.eql(\"Powder Canister\");\r",
							"    pm.expect(jsonData.products[2].category).to.eql(\"beauty\");\r",
							"    pm.expect(jsonData.products[2].dimensions.height).to.eql(10.7);\r",
							"    pm.expect(jsonData.products[2].tags[1]).to.eql(\"face powder\");\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							"pm.test(\"Vérification de l'ID ,Title,Category\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.products[1].id).to.eql(2);\r",
							"    pm.expect(jsonData.products[1].title).to.eql(\"Eyeshadow Palette with Mirror\");\r",
							"    pm.expect(jsonData.products[1].category).to.eql(\"beauty\");\r",
							"    pm.expect(jsonData.products[1].dimensions.height).to.eql(8.63);\r",
							"    pm.expect(jsonData.products[1].tags[1]).to.eql(\"eyeshadow\");\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"// Fonction pour vérifier la structure de l'objet\r",
							"function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = {\r",
							"    \"products\": [\r",
							"        {\r",
							"            \"id\": 0,\r",
							"            \"title\": \"\",\r",
							"            \"description\": \"\",\r",
							"            \"price\": 0,\r",
							"            \"discountPercentage\": 0,\r",
							"            \"rating\": 0,\r",
							"            \"stock\": 0,\r",
							"            \"brand\": \"\",\r",
							"            \"category\": \"\",\r",
							"            \"thumbnail\": \"\",\r",
							"            \"images\": [\"\", \"\", \"\"]\r",
							"        },\r",
							"        // Ajoutez d'autres objets produits ici si nécessaire\r",
							"    ],\r",
							"    \"total\": 0,\r",
							"    \"skip\": 0,\r",
							"    \"limit\": 0\r",
							"};\r",
							"\r",
							"\r",
							"    // Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://dummyjson.com/products"
			},
			"response": []
		},
		{
			"name": "Get a single product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" /************* */\r",
							"pm.test(\"Vérifier la présence des attributs dans le corps de réponse\", function () {\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier la présence des attributs\r",
							"    pm.expect(responseBody).to.have.property(\"id\");\r",
							"    pm.expect(responseBody).to.have.property(\"title\");\r",
							"    pm.expect(responseBody).to.have.property(\"description\");\r",
							"    pm.expect(responseBody).to.have.property(\"price\");\r",
							"    pm.expect(responseBody).to.have.property(\"discountPercentage\");\r",
							"    pm.expect(responseBody).to.have.property(\"rating\");\r",
							"    pm.expect(responseBody).to.have.property(\"stock\");\r",
							"    pm.expect(responseBody).to.have.property(\"brand\");\r",
							"    pm.expect(responseBody).to.have.property(\"category\");\r",
							"    pm.expect(responseBody).to.have.property(\"thumbnail\");\r",
							"    pm.expect(responseBody).to.have.property(\"images\");\r",
							"});\r",
							"\r",
							"/********* */\r",
							"function checkStructure(obj, template) {\r",
							"    // Vérifie que chaque clé du template est présente dans l'objet\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        // Si la valeur dans le template est un objet (non tableau), vérifie récursivement\r",
							"        if (typeof template[key] === 'object' && !Array.isArray(template[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        } \r",
							"        // Si la valeur dans le template est un tableau, vérifie que c'est aussi un tableau dans l'objet\r",
							"        else if (Array.isArray(template[key])) {\r",
							"            if (!Array.isArray(obj[key])) {\r",
							"                return false;\r",
							"            }\r",
							"            // Optionnel : vérifie la structure des objets dans le tableau si nécessaire\r",
							"            for (let i = 0; i < template[key].length; i++) {\r",
							"                if (typeof template[key][i] === 'object' && !checkStructure(obj[key][i], template[key][i])) {\r",
							"                    return false;\r",
							"                }\r",
							"            }\r",
							"        } \r",
							"        // Sinon, vérifie que les types correspondent\r",
							"        else {\r",
							"            if (typeof obj[key] !== typeof template[key]) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    // Vérifie qu'il n'y a pas de clés supplémentaires dans l'objet par rapport au template\r",
							"    for (var key in obj) {\r",
							"        if (!(key in template)) {\r",
							"            return false;\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = {\r",
							"  \"id\": 0,\r",
							"  \"title\": \"\",\r",
							"  \"description\": \"\",\r",
							"  \"category\": \"\",\r",
							"  \"price\": 0,\r",
							"  \"discountPercentage\": 0,\r",
							"  \"rating\": 0,\r",
							"  \"stock\": 0,\r",
							"  \"tags\": [],\r",
							"  \"brand\": \"\",\r",
							"  \"sku\": \"\",\r",
							"  \"weight\": 0,\r",
							"  \"dimensions\": {\r",
							"    \"width\": 0,\r",
							"    \"height\": 0,\r",
							"    \"depth\": 0\r",
							"  },\r",
							"  \"warrantyInformation\": \"\",\r",
							"  \"shippingInformation\": \"\",\r",
							"  \"availabilityStatus\": \"\",\r",
							"  \"reviews\": [\r",
							"    {\r",
							"      \"rating\": 0,\r",
							"      \"comment\": \"\",\r",
							"      \"date\": \"\",\r",
							"      \"reviewerName\": \"\",\r",
							"      \"reviewerEmail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"rating\": 0,\r",
							"      \"comment\": \"\",\r",
							"      \"date\": \"\",\r",
							"      \"reviewerName\": \"\",\r",
							"      \"reviewerEmail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"rating\": 0,\r",
							"      \"comment\": \"\",\r",
							"      \"date\": \"\",\r",
							"      \"reviewerName\": \"\",\r",
							"      \"reviewerEmail\": \"\"\r",
							"    }\r",
							"  ],\r",
							"  \"returnPolicy\": \"\",\r",
							"  \"minimumOrderQuantity\": 0,\r",
							"  \"meta\": {\r",
							"    \"createdAt\": \"\",\r",
							"    \"updatedAt\": \"\",\r",
							"    \"barcode\": \"\",\r",
							"    \"qrCode\": \"\"\r",
							"  },\r",
							"  \"thumbnail\": \"\",\r",
							"  \"images\": [\"\", \"\", \"\"]\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"    // Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/{{Endpoint-p}}/1"
			},
			"response": []
		},
		{
			"name": "Search products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = {\r",
							"  \"products\": [\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      // autres attributs...\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      // autres attributs...\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      // autres attributs...\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      // autres attributs...\r",
							"    }\r",
							"    // 23 résultats\r",
							"  ],\r",
							"  \"total\": 0,\r",
							"  \"skip\": 0,\r",
							"  \"limit\": 0\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"    // Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{Endpoint-p}}/search?q=phone",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{Endpoint-p}}",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "phone"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Limit and skip products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = {\r",
							"  \"products\": [\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"price\": 0\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"price\": 0\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"price\": 0\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"price\": 0\r",
							"    }\r",
							"    // 10 items\r",
							"  ],\r",
							"  \"total\": 0,\r",
							"  \"skip\": 0,\r",
							"  \"limit\": 0\r",
							"}\r",
							"\r",
							"  \r",
							"\r",
							"  // Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});*/"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"size\", 5);\r",
							"console.clear();\r",
							"console.info(pm.globals.get(\"size\"));\r",
							"pm.globals.set(\"Limit\",pm.globals.get(\"size\") );\r",
							"console.info(pm.globals.get(\"Limit\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{Endpoint-p}}?limit={{Limit}}&skip=10&select=title,price",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{Endpoint-p}}"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{Limit}}"
						},
						{
							"key": "skip",
							"value": "10"
						},
						{
							"key": "select",
							"value": "title,price"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = {\r",
							"  \"products\": [\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"price\": 0\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"price\": 0\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"price\": 0\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"price\": 0\r",
							"    }\r",
							"    // 10 items\r",
							"  ],\r",
							"  \"total\": 0,\r",
							"  \"skip\": 0,\r",
							"  \"limit\": 0\r",
							"}\r",
							"\r",
							"  \r",
							"\r",
							"  // Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/{{Endpoint-p}}?sortBy=title&order=asc",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"{{Endpoint-p}}"
					],
					"query": [
						{
							"key": "sortBy",
							"value": "title"
						},
						{
							"key": "order",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all products categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = [\r",
							"  {\r",
							"    \"slug\": \"\",\r",
							"    \"name\": \"\",\r",
							"    \"url\": \"\"\r",
							"  },\r",
							"  {\r",
							"    \"slug\": \"\",\r",
							"    \"name\": \"\",\r",
							"    \"url\": \"\"\r",
							"  },\r",
							"  {\r",
							"    \"slug\": \"\",\r",
							"    \"name\": \"\",\r",
							"    \"url\": \"\"\r",
							"  }\r",
							"  // more items\r",
							"]\r",
							"\r",
							"\r",
							"  \r",
							"\r",
							"  // Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}/{{Endpoint-p}}/categories"
			},
			"response": []
		},
		{
			"name": "Get products category list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = [\r",
							"  \"beauty\",\r",
							"  \"fragrances\",\r",
							"  \"furniture\",\r",
							"  \"groceries\",\r",
							"  \"home-decoration\",\r",
							"  \"kitchen-accessories\",\r",
							"  \"laptops\",\r",
							"  \"mens-shirts\",\r",
							"  \"mens-shoes\",\r",
							"  \"mens-watches\",\r",
							"  \"mobile-accessories\",\r",
							"  \"motorcycle\",\r",
							"  \"skin-care\",\r",
							"  \"smartphones\",\r",
							"  \"sports-accessories\",\r",
							"  \"sunglasses\",\r",
							"  \"tablets\",\r",
							"  \"tops\",\r",
							"  \"vehicle\",\r",
							"  \"womens-bags\",\r",
							"  \"womens-dresses\",\r",
							"  \"womens-jewellery\",\r",
							"  \"womens-shoes\",\r",
							"  \"womens-watches\"\r",
							"]\r",
							"\r",
							"\r",
							"  // Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}/{{Endpoint-p}}/category-list"
			},
			"response": []
		},
		{
			"name": "Get products by a category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = {\r",
							"  \"products\": [\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    },\r",
							"    {\r",
							"      \"id\": 0,\r",
							"      \"title\": \"\",\r",
							"      \"category\": \"\",\r",
							"      \"price\": 0,\r",
							"      \"discountPercentage\": 0,\r",
							"      \"rating\": 0,\r",
							"      \"stock\": 0,\r",
							"      \"tags\": [],\r",
							"      \"brand\": \"\",\r",
							"      \"sku\": \"\",\r",
							"      \"weight\": 0,\r",
							"      \"dimensions\": {\r",
							"        \"width\": 0,\r",
							"        \"height\": 0,\r",
							"        \"depth\": 0\r",
							"      },\r",
							"      \"warrantyInformation\": \"\",\r",
							"      \"shippingInformation\": \"\",\r",
							"      \"availabilityStatus\": \"\",\r",
							"      \"reviews\": [],\r",
							"      \"returnPolicy\": \"\",\r",
							"      \"minimumOrderQuantity\": 0,\r",
							"      \"meta\": {\r",
							"        \"createdAt\": \"\",\r",
							"        \"updatedAt\": \"\",\r",
							"        \"barcode\": \"\",\r",
							"        \"qrCode\": \"\"\r",
							"      },\r",
							"      \"images\": [],\r",
							"      \"thumbnail\": \"\"\r",
							"    }\r",
							"  ],\r",
							"  \"total\": 16,\r",
							"  \"skip\": 0,\r",
							"  \"limit\": 16\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"  // Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}/{{Endpoint-p}}/category/smartphones"
			},
			"response": []
		},
		{
			"name": "Add a new product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function checkStructure(obj, template) {\r",
							"    // Vérifie que chaque clé du template est présente dans l'objet\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        // Si la valeur dans le template est un objet (non tableau), vérifie récursivement\r",
							"        if (typeof template[key] === 'object' && !Array.isArray(template[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        } \r",
							"        // Si la valeur dans le template est un tableau, vérifie que c'est aussi un tableau dans l'objet\r",
							"        else if (Array.isArray(template[key])) {\r",
							"            if (!Array.isArray(obj[key])) {\r",
							"                return false;\r",
							"            }\r",
							"            // Optionnel : vérifie la structure des objets dans le tableau si nécessaire\r",
							"            for (let i = 0; i < template[key].length; i++) {\r",
							"                if (typeof template[key][i] === 'object' && !checkStructure(obj[key][i], template[key][i])) {\r",
							"                    return false;\r",
							"                }\r",
							"            }\r",
							"        } \r",
							"        // Sinon, vérifie que les types correspondent\r",
							"        else {\r",
							"            if (typeof obj[key] !== typeof template[key]) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    // Vérifie qu'il n'y a pas de clés supplémentaires dans l'objet par rapport au template\r",
							"    for (var key in obj) {\r",
							"        if (!(key in template)) {\r",
							"            return false;\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réquete est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedRequest ={\r",
							"    \"title\": \"\",\r",
							"    \"description\": \"\",\r",
							"    \"price\": null,\r",
							"    \"stock\": null\r",
							"\r",
							"  }\r",
							"\r",
							"\r",
							"    // Convertir le corps de réponse de la requête en JSON\r",
							"    var requestBody = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(requestBody, expectedRequest)).to.be.true;\r",
							"});\r",
							"// Liste des champs requis avec leur description\r",
							"const requiredFields = {\r",
							"    \"title\": \"Title10\",\r",
							"    \"description\": \"Description\",\r",
							"    \"price\": \"Price\",\r",
							"    \"stock\": \"stock\"\r",
							"    \r",
							"};\r",
							"// Récupérer le corps de la requête et le parser en tant qu'objet JSON\r",
							"const requestBody = JSON.parse(pm.request.body);\r",
							" \r",
							"// Vérifier chaque champ requis\r",
							"Object.entries(requiredFields).forEach(([field, description]) => {\r",
							"    // Vérifier si le champ est présent dans le corps de la requête\r",
							"    if (!requestBody.hasOwnProperty(field) || requestBody[field] === null || requestBody[field] === \"\") {\r",
							"        // Afficher un message d'erreur dans la console et annuler la requête\r",
							"        console.error(`Le champ \"${description}\" n'est pas renseigné pourtant il est obligatoire`);\r",
							"       \r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"BMW Pencil\",\r\n    \"description\":\"The BMW Pencil\",\r\n    \"price\":5,\r\n    \"stock\":9.99\r\n\r\n\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/{{Endpoint-p}}/add"
			},
			"response": []
		},
		{
			"name": "Update a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = {\r",
							"        \"id\": 1,\r",
							"        \"title\": \"iPhone Galaxy +1\"\r",
							"        // D'autres champs peuvent être omis si la réponse ne les contient pas\r",
							"    };\r",
							"// Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"iPhone Galaxy +1\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/{{Endpoint-p}}/1"
			},
			"response": []
		},
		{
			"name": "Delete a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function checkStructure(obj, template) {\r",
							"    for (var key in template) {\r",
							"        if (!(key in obj)) {\r",
							"            return false;\r",
							"        }\r",
							"        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"            if (!checkStructure(obj[key], template[key])) {\r",
							"                return false;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    return true;\r",
							"}\r",
							"pm.test(\"Vérifier que la structure de la réponse est conforme à l'exemple de la documentation\", function () {\r",
							"    // Définir l'exemple de réponse de la documentation\r",
							"    var expectedResponse = {\r",
							"  \"id\": 0,\r",
							"  \"title\": \"\",\r",
							"  \"category\": \"\",\r",
							"  \"price\": 0,\r",
							"  \"discountPercentage\": 0,\r",
							"  \"rating\": 0,\r",
							"  \"stock\": 0,\r",
							"  \"tags\": [],\r",
							"  \"brand\": \"\",\r",
							"  \"sku\": \"\",\r",
							"  \"weight\": 0,\r",
							"  \"dimensions\": {\r",
							"    \"width\": 0,\r",
							"    \"height\": 0,\r",
							"    \"depth\": 0\r",
							"  },\r",
							"  \"warrantyInformation\": \"\",\r",
							"  \"shippingInformation\": \"\",\r",
							"  \"availabilityStatus\": \"\",\r",
							"  \"reviews\": [],\r",
							"  \"returnPolicy\": \"\",\r",
							"  \"minimumOrderQuantity\": 0,\r",
							"  \"meta\": {\r",
							"    \"createdAt\": \"\",\r",
							"    \"updatedAt\": \"\",\r",
							"    \"barcode\": \"\",\r",
							"    \"qrCode\": \"\"\r",
							"  },\r",
							"  \"images\": [],\r",
							"  \"thumbnail\": \"\",\r",
							"  \"isDeleted\": true,\r",
							"  \"deletedOn\": \"\"\r",
							"}\r",
							"\r",
							"// Convertir le corps de réponse de la requête en JSON\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    // Vérifier que la structure de la réponse correspond à celle de l'exemple de la documentation\r",
							"    pm.expect(checkStructure(responseBody, expectedResponse)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{BaseURL}}/{{Endpoint-p}}/1"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"/*pm.test(\"Status code is 200\", function () {\r",
					"    pm.response.to.have.status(200);\r",
					"});*/\r",
					"pm.test(\"Content-Type is present\", function () {\r",
					"    pm.response.to.have.header(\"Content-Type\");\r",
					"   // pm.response.to.have.header(\"Content-Encoding\");\r",
					"pm.test(\"Successful POST request\", function () {\r",
					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
					"});\r",
					"    pm.response.to.have.header(\"Connection\");\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "Endpoint-p",
			"value": "products"
		}
	]
}